worker_processes 2;

events {
  worker_connections  1024;
  use epoll;
  multi_accept on;
}

env SERVICE_NAME;
env APM_OAP_HOST;

http {
  resolver 127.0.0.11 ipv6=off;
  lua_package_path "/etc/lua/lib/skywalking/?.lua;;";

  lua_shared_dict tracing_buffer 10m;

  init_worker_by_lua_block {
      local metadata_buffer = ngx.shared.tracing_buffer
      local service_name = os.getenv("SERVICE_NAME")
      local apm_oap_host = os.getenv("APM_OAP_HOST")

      metadata_buffer:set('serviceName', service_name)
      metadata_buffer:set('serviceInstanceName', 'Gateway')
      require("client"):startBackendTimer(apm_oap_host)
  }

  underscores_in_headers  on;
  set_real_ip_from  127.0.0.1;
  
  server_tokens off;
  client_max_body_size 30M;
 
  server {
    gzip on;
    listen 80;
    server_name _;
    add_header X-Request-ID $request_id;

    proxy_http_version 1.1;
    proxy_set_header  Upgrade           $http_upgrade;
    proxy_set_header  Connection        "upgrade";
    proxy_set_header  HOST              $proxy_host;
    proxy_set_header  X-Real-IP         $remote_addr;
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  Authorization     $http_authorization;
    proxy_set_header  X-Request-ID      $request_id;
    proxy_pass_header Authorization;

    rewrite_by_lua_block {
        require("tracer"):start("upstream-svc")
    }

    location = /backend-with-subrequest {
        default_type application/json;
        auth_request      /subrequest;
        proxy_pass http://127.0.0.1:80/pass;
    }

    location = /backend-without-subrequest {
        default_type application/json;
        proxy_pass http://127.0.0.1:80/pass;
    }

    body_filter_by_lua_block {
        if ngx.arg[2] then
            require("tracer"):finish()
        end
    }
    log_by_lua_block {
        require("tracer"):prepareForReport()
    }

    location = /subrequest {
        internal;
        proxy_method            GET;
        # Proxy pass to always 200
        proxy_pass              http://run.mocky.io/v3/af34594e-9cbc-4ad7-b569-6c1942bba832;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
    } 

    location = /pass {
        default_type application/json;

        content_by_lua_block {
            ngx.say('{"message":"backend"}')
        }
    }
  }
}